TIDBITS:
ADSI only returns 1000 results by default, more records can be returned by adjusting the .PageSize parameter:
BE CAREFUL NOT TO MAKE THE VALUE TOO LARGE.
$searchDom.PageSize = 1000

The .SizeLimit parameter, can adjust the # of AD query results down from 1000 without .PageSize; or to a larger number (less than the entire data set)
$searchDom.SizeLimit = 50

Add to cmdlets to not report errors
-ErrorAction SilentlyContinue

Wrap the lines of results that go beyond a line's length and are truncated with "..."
| Format-Table -Wrap

Force Powershell to use TLS1.2:
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

Determine remote computer's uptime:
(Get-Date) - (Get-CimInstance Win32_OperatingSystem -ComputerName <Remote_Computer>).LastBootupTime
sysinfo /s <remote_computer_name>

NETWORK STUFF:
Sends 1 Ping, and with -Quiet only returns True or False if machine is online or not:
Test-Connection -BufferSize 32 -Count 1 -ComputerName 192.168.0.41 -Quiet

Get list of computers in AD, ping each system, and try to access C$ share of all online computers:
([ADSISearcher]"(&(ObjectClass=computer)(samaccountname=*<FILTER>*))").FindAll() | % { ([adsi]$_.Path).name } | % {if (Test-Connection -BufferSize 32 -Count 1 -ComputerName $_ -Quiet) { if (Test-Path "\\$_\c$") { dir \\$_\c$\users\ | select FullName,LastAccessTime | where { $_.LastAccessTime -gt [datetime]'2018/10/30' } } } }

([ADSISearcher]"(&(ObjectClass=computer)(samaccountname=*<FILTER>*))").FindAll() | % { ([adsi]$_.Path).name } | % {if (Test-Connection -BufferSize 32 -Count 1 -ComputerName $_ -Quiet) { if (Test-Path "\\$_\c$") { dir \\$_\c$\users\ | select FullName,LastAccessTime } } }

$searchDom=[ADSISearcher]"(&(ObjectClass=computer)(samaccountname=*<FILTER>*))"; $searchDom.PageSize=5000; $searchDom.FindAll() | % { ([adsi]$_.Path).name } | % {if (Test-Connection -BufferSize 32 -Count 1 -ComputerName $_ -Quiet) { if (Test-Path "\\$_\c$") { dir \\$_\c$\users\ | select FullName,LastAccessTime } } }



AD QUERIES:

Domain Trust Relationships:
([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()

$myRootDirContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext('domain',"<foreign_domain>"); ([System.DirectoryServices.ActiveDirectory.Domain]::GetDomain([System.DirectoryServices.ActiveDirectory.DirectoryContext]$myRootDirContext)).GetAllTrustRelationships()

(New-Object DirectoryServices.DirectorySearcher "ObjectClass=user").FindAll() | Select path

([ADSISearcher]"Name=SomeName").FindAll() | Select Path

The following command uses OR logic to query...  
([ADSISearcher]"(|(objectCategory=group)(Name=Somename))").FindAll() | Select Path

This command uses AND logic to query...
([ADSISearcher]"(&(objectCategory=group)(Name=Somename))").FindAll() | Select Path

To query other domains (must have authorization through domain trusts):
$searchDom=[adsisearcher]([adsi]"LDAP://some.domain")
$searchDom.Filter="(objectCategory=group)"  ' This filters for all group objects, can filter however you need to
$searchDom.FindAll() | Select Path

To search all of AD for a string in the samaccountname parameter:
$searchDom=New-Object DirectoryServices.DirectorySearcher; $searchDom.Filter="(&(objectCategory=user)(samaccountname=<Search_Term>*))"; $searchDom.SearchRoot="LDAP://DC=<Domain>,DC=<Domain>"; $searchDom.FindAll() | % { ([adsi]$_.Path).samaccountname }

To get a list of groups a user is a member of (searches entire forest with GC://, switch to LDAP:// for target domain only):
$searchDom=New-Object DirectoryServices.DirectorySearcher; $searchDom.Filter="(&(objectCategory=user)(samaccountname=*<user_name>*))"; $searchDom.SearchRoot="GC://DC=<domain>,DC=<domain>"; $searchDom.FindAll() | % { (
[adsi]$_.Path).memberOf }

Password Spray:
gc -Path "<List_of_UserNames>" | % { $domainCheck=New-Object System.DirectoryServices.DirectoryEntry("LDAP://dc=<Domain>,dc=<Domain>", "$_@<Domain>.<Domain>", "Fall2018"); if ($domainCheck.name -ne $null) {Write-Host "$_ Success"} else {"$_ Failed"} }
